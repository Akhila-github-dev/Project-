
@Entity
@Table(name = "patients")
@Data
@ToString(exclude = "appointments")
@NoArgsConstructor
@AllArgsConstructor
public class Patient {

    @Id
    @Column(name = "patient_id")
    private String patientId;

    @Column(name = "first_name", nullable = false)
    private String firstName;

    @Column(name = "last_name", nullable = false)
    private String lastName;

    @Column(name = "email", unique = true)
    private String email;

   @Column(name = "date_of_birth")
    private LocalDate dateOfBirth; // Stored in 'YYYY-MM-DD' format.

    @OneToOne(cascade = CascadeType.ALL) // one patient oka address untadhi // cascadeType.ALL if we save patient details, automatically address details will be saved 
	@JoinColumn(name = "address_id")  //to refer one particular Id (foreign key) 
	private Address address; //has a relationship 

    @OneToMany(mappedBy = "patient", cascade = CascadeType.ALL, orphanRemoval = true)  // oka patient ki many appointments untadhi
    @JsonIgnore // we might get stack over flow error bcz patient will call appointment, appointment will call patient so will get stack overflow so to ignore it we use @jsonIgnore 
    private List<Appointment> appointments;
    
    
    @PrePersist  // before saving the patient details( table details) this method will call generate unique patient id and save those details. 
    private void generatePatientId() {
        if (this.patientId == null) {
            String yearMonth = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMM"));

            String randomDigits = String.format("%06d", new Random().nextInt(1_000_000));

            this.patientId = yearMonth + randomDigits; //to generate unique patientId
        }
    }
    
}


@Entity - same table present in db
@Table(name ="namingconvention")
@Data - generate getters and setters 
@NoArgsConstructor - default constructor is generated.
@AllArgsConstructor - generate all argunments constructor
@ToString (exclude ="appointemts") - to generate to string
if we don't have tostring it will print the hash code 
@Column(name = "last_name", nullable = false)  ->doesn't allow null vaules 
@Column(name = "email", unique = true) -> it should be unique 
@PrePersist  - before saving the patient details particular method will call and update the patient ID
@Embeddable 
public class Address {
private String street;
}
@Entity
public class User {
    @Id
    @GeneratedValue
    private Long id;
    
    private String name;
    
    @Embedded // in user table we will get address table
    private Address address;
  
}

@Builder- without need of constructor we can build. in builder design pattern it is useful 

if we don't put mappedBy it will create two tables 
 @OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
    private Staff staff;



@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE) 
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder  -> doctor related details are present in super class staff, so that y we use superBuilder 
public class Doctor extends Staff {

    @Column(name = "specialization")
    private String specialization;  // Doctor's specialization

    // Additional doctor-specific fields can be added here
}

every doctor is a staff and every staff is a user


@OneToMany(mappedBy = "room", cascade = CascadeType.ALL, orphanRemoval = true) -> when we have one to many mapping, in list if we delete one,all other fileds are not deleted. to delete them we put orphanRemoval as true. 
private List<Bed> beds; // List of beds in the room  //here jsonignore is also not there for onetoMany, bcz we are not pulling any data for room and beds, that's y we haven't kept jsonIgnore



public class Appointment {

    @Id
    private String appointmentId;

    @ManyToOne(fetch = FetchType.LAZY) -> when we check appiontment details automatically we will get doctor details also. we don't want it so FetchType.LAZY. on demand it will bring. if we keep eager we get doctor details with appointment 
    @JoinColumn(name = "doctor_id", nullable = false)
    private Doctor doctor;
