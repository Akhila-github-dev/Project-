dependencies -

spring web
spring data jpa
spring security
mysql connector
H2 
jwt(jason web token)
logger
lombok
starter mail
swagger
dev tools - automatic refresh

development phase we use dev tools 
production server we don't use dev tools

flow of an api request in a backend application
                                                            SERVICE
client <=> filter -> dispatcher servlet -> controller -> service Impl -> Dao

in service Impl we have Dto, model, builders, loggers ,exceptions , notification(mail notification)

client is our UI (fronted)
before going to controller (we will do filters like authentication and authorization using Jwt) 

in spring application we need dipatcher servlet
in spring boot will auto configure the dispatcher servlet(auto configure)

Controller - we will write APIs
Service - business Logic  
DAO- (repos) data access object (data base operations are done here)

have you writen any filter?
yes i have done it, I Have written JWT filter, when we get request from client JWT filter will stop it and check if it is a valid user or not. if it is not a vaild user filter will stop you 
there and  401 or 403 error status code

(200,400,500)- important 
200 -ok(get)
201- created(post)
404- Not found
405- invalid method call (method not available)
401- unauthorized ( authorization ) roles 
403- forbidden (authentication user name password wrong )
209- backend ki frontend ki communication

Model package -entity (exact copy of ur table)

DTO- data transfer object( used to communicate client and server) 
over the internet request is going so hackers can hack it. we only expose dtos not entity. dtos are used to expose data to frontend and bring data from fronted.
some details should not be shown to frontend eg - password, address. dtos will exculde unnecessary details

Builders-
builder class
dto to entity 
entity to dto

Loggers
track each issues
each request should be logged 

exception handling
 handle it and clear msg

Notification
email should be send 

maven build tool - 
pom.xml -
if we keep one dependency in pom file , maven build tool will bring required dependencies. It will generate jar file.
in maven repository we find all the jar files.

In real time
we will have artificate repository  all the required dependency are present in artificate. we will pull from there
because maven is open source it has some vulnerability so we dont use it directly.

swagger - we can do testing, documents generation
default ui for swagger- localhost:8989/swagger-ui/index.html
it will create the interface (UI) for u without doing nothing


H2 is in memory database. application start chesthe untadhi end chesthe end avuthundhi

profile - switch from one stage to another stage
dev profile -QA profile -prod profile
application-dev.yml 
application-prod.yml 
application.properties

From where we are getting username and passwords In real time project ?
devops team - over the pipline inject the variable (environment variable)
sensitive things we shouldn't hardcode 
In applicaton.properties we will give {$username} {$password} we will get those details from devops team over the pipline when they build sever. when server is building we will automatically get those details.

In main application.properties file
spring.profile.active=dev    this profile is active 
we have dev,qa,uat,prod profiles 

@postcontruct - when application is building(or) running, it will store some dummy values
consturct avuthunna appudu will store some dummy vaule 








